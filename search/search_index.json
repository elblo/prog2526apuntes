{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Programaci\u00f3n","text":"Apuntes en construcci\u00f3n <p>Estos apuntes se est\u00e1n elaborando por Eladio Blanco durante el curso 25/26.</p> <p>Aqu\u00ed puedes encontrar los apuntes del m\u00f3dulo de Programaci\u00f3n, que se imparte en el primero curso del ciclo formativo de grado superior de Desarrollo de Aplicaciones Web.</p> <p>La duraci\u00f3n del m\u00f3dulo es de 256 horas lectivas, a raz\u00f3n de 8 horas semanales durante todo el curso. Se ha planificado bas\u00e1ndose en 4 sesiones por semana.</p>"},{"location":"index.html#que-voy-a-aprender","title":"\u00bfQu\u00e9 voy a aprender?","text":"<ul> <li>XXX</li> </ul>"},{"location":"index.html#resultados-de-aprendizaje","title":"Resultados de aprendizaje","text":"<ol> <li>XXX</li> </ol>"},{"location":"index.html#unidades-didacticas-y-temporalizacion","title":"Unidades did\u00e1cticas y temporalizaci\u00f3n","text":"<p>A continuaci\u00f3n se muestran las unidades did\u00e1cticas y una estimaci\u00f3n temporal de cada una de ellas.</p>"},{"location":"index.html#primera-evaluacion","title":"Primera evaluaci\u00f3n","text":"<p>Duraci\u00f3n estimada: XXX horas</p> <ol> <li>Introducci\u00f3n (24h)<ul> <li>XXX</li> </ul> </li> </ol>"},{"location":"index.html#segunda-evaluacion","title":"Segunda evaluaci\u00f3n","text":"<p>Duraci\u00f3n estimada: XX horas</p>"},{"location":"index.html#tercera-evaluacion","title":"Tercera evaluaci\u00f3n","text":"<p>Duraci\u00f3n estimada: XX horas</p>"},{"location":"index.html#evaluacion","title":"Evaluaci\u00f3n","text":"<p>La nota de cada evaluaci\u00f3n y tambi\u00e9n final se calcula mediante una suma ponderada de la nota de cada Criterio de Evaluaci\u00f3n evaluado hasta el momento.</p> <p>A cada criterio se le asigna un porcentaje del total de la nota final y va asociado a un tipo de actividad que puede ser:</p> <ul> <li>Examen Teor\u00eda</li> <li>Examen Pr\u00e1cticas</li> <li>Ejercicios de clase</li> <li>Pr\u00e1cticas obligatorias</li> </ul>"},{"location":"index.html#recursos","title":"Recursos","text":"<p>Recursos del m\u00f3dulo</p> Documentaci\u00f3nSoftwareCursos Java <ul> <li> <p>Tutoriales</p> <ul> <li>XXX</li> </ul> </li> <li> <p>Referencias</p> <ul> <li>XXX</li> </ul> </li> </ul> <ul> <li>IDE<ul> <li>IntelliJ IDEA</li> </ul> </li> <li>Administraci\u00f3n de bases de datos<ul> <li>XXX</li> </ul> </li> <li>Entorno de desarrollo<ul> <li>XAMPP</li> </ul> </li> </ul> <ul> <li>OpenWebinars:<ul> <li>XXX</li> </ul> </li> </ul>"},{"location":"01introduccion.html","title":"Introducci\u00f3n a la Programaci\u00f3n","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 6 sesiones</p> <p>Resultados de aprendizaje:</p> <ol> <li>Comprende los conceptos fundamentales de la programaci\u00f3n, sus paradigmas y fases de desarrollo.</li> <li>Conoce los distintos tipos de lenguajes de programaci\u00f3n y su evoluci\u00f3n hist\u00f3rica.</li> <li>Comprende el proceso de compilaci\u00f3n y ejecuci\u00f3n de programas en Java.</li> <li>Utiliza un entorno de desarrollo integrado para elaborar programas b\u00e1sicos.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se han identificado las acciones cotidianas que dependen de la programaci\u00f3n.</li> <li>Se han descrito los conceptos de programa, programaci\u00f3n y algoritmo.</li> <li>Se han caracterizado los principales paradigmas de programaci\u00f3n y sus diferencias.</li> <li>Se han descrito las fases del ciclo de vida de un programa con ejemplos pr\u00e1cticos.</li> <li>Se han diferenciado los tipos de lenguajes de programaci\u00f3n y sus ventajas e inconvenientes.</li> <li>Se ha explicado el funcionamiento de Java y su m\u00e1quina virtual.</li> <li>Se han creado programas en Java utilizando un IDE de desarrollo.</li> </ol>"},{"location":"01introduccion.html#11-introduccion","title":"1.1 Introducci\u00f3n","text":"<p>Vivimos rodeados de tecnolog\u00eda. Muchas de las acciones que realizamos a diario son posibles gracias a programas inform\u00e1ticos:</p> <ul> <li>La alarma del m\u00f3vil que te despierta.</li> <li>El microondas que calienta tu desayuno.</li> <li>El ascensor que utilizas para salir de casa.</li> <li>Las noticias que consultas en un dispositivo digital.</li> <li>Los videojuegos, las aplicaciones de mensajer\u00eda o incluso los cajeros autom\u00e1ticos.</li> </ul> <p>Detr\u00e1s de todo ello hay personas que dise\u00f1an, programan y mantienen el software. La programaci\u00f3n es, por tanto, una habilidad fundamental en la sociedad actual.</p> <p>Reflexiona</p> <p>Intenta pensar cu\u00e1ntas veces al d\u00eda interact\u00faas con un programa. Te sorprender\u00e1 ver hasta qu\u00e9 punto dependemos de ellos.</p>"},{"location":"01introduccion.html#12-programas-y-programacion","title":"1.2 Programas y Programaci\u00f3n","text":"<p>Un programa es un conjunto de instrucciones que indican a un ordenador c\u00f3mo realizar una tarea. La programaci\u00f3n es el proceso de dise\u00f1ar y escribir dichos programas.</p> Resoluci\u00f3n de problemas mediante programaci\u00f3n"},{"location":"01introduccion.html#conceptos-clave-en-la-resolucion-de-problemas","title":"Conceptos clave en la resoluci\u00f3n de problemas","text":"<ul> <li>Abstracci\u00f3n: centrarse en lo esencial, ignorando los detalles irrelevantes.</li> <li>Divide y vencer\u00e1s: dividir un problema complejo en problemas m\u00e1s peque\u00f1os y manejables.</li> <li>Encapsulaci\u00f3n: agrupar datos y procedimientos relacionados, de forma que se oculten los detalles internos.</li> <li>Modularidad: organizar el c\u00f3digo en m\u00f3dulos reutilizables y f\u00e1ciles de mantener.</li> </ul>"},{"location":"01introduccion.html#algoritmo-y-programa","title":"Algoritmo y programa","text":"<ul> <li>Algoritmo: secuencia ordenada y no ambigua de pasos que llevan a la soluci\u00f3n de un problema.</li> <li>Programa: implementaci\u00f3n de un algoritmo en un lenguaje de programaci\u00f3n concreto.</li> </ul>"},{"location":"01introduccion.html#representacion-de-algoritmos","title":"Representaci\u00f3n de algoritmos","text":"<p>Existen distintas t\u00e9cnicas para plasmar un algoritmo antes de programarlo:</p> <ul> <li>Diagramas de flujo: representaci\u00f3n gr\u00e1fica de los pasos.</li> <li>Pseudoc\u00f3digo: texto estructurado con instrucciones similares a un lenguaje de programaci\u00f3n.</li> <li>Tablas de decisi\u00f3n: representaci\u00f3n tabular de condiciones y acciones.</li> </ul> <p>Ejemplo de algoritmo cotidiano</p> <p>Piensa en la receta de cocinar pasta:</p> <ul> <li>Poner agua a hervir.</li> <li>A\u00f1adir sal y pasta.</li> <li>Esperar 10 minutos.</li> <li>Escurrir y servir.</li> </ul> <p>Este conjunto de pasos claros y ordenados es un algoritmo.</p>"},{"location":"01introduccion.html#13-paradigmas-de-programacion","title":"1.3 Paradigmas de Programaci\u00f3n","text":"<p>Los paradigmas son formas de clasificar los lenguajes de programaci\u00f3n seg\u00fan sus caracter\u00edsticas.</p>"},{"location":"01introduccion.html#clasificacion-general","title":"Clasificaci\u00f3n general","text":"<ul> <li>Programaci\u00f3n imperativa: describe paso a paso c\u00f3mo resolver un problema (c\u00f3mo hacerlo). Ejemplo: C.</li> <li>Programaci\u00f3n declarativa: describe el resultado que se quiere obtener (qu\u00e9 se desea). Ejemplo: SQL.</li> </ul> Paradigmas de programaci\u00f3n"},{"location":"01introduccion.html#subtipos-de-paradigmas","title":"Subtipos de paradigmas","text":"<ul> <li>Imperativo (c\u00f3mo se hace, secuencia de instrucciones)  </li> <li>Convencional (no estructurada) <ul> <li>Basada en <code>GOTO</code>, poco mantenible  </li> </ul> </li> <li>Estructurada <ul> <li>Uso de funciones, bucles, condicionales, modularidad  </li> </ul> </li> <li> <p>Orientado a Objetos (subtipo imperativo) </p> <ul> <li>Objetos con atributos y m\u00e9todos, herencia, polimorfismo  </li> </ul> </li> <li> <p>Declarativo (qu\u00e9 se quiere lograr, sin detallar el c\u00f3mo)  </p> </li> <li>Funcional <ul> <li>Basado en funciones matem\u00e1ticas, sin estado mutable  </li> </ul> </li> <li> <p>L\u00f3gico </p> <ul> <li>Basado en reglas y deducci\u00f3n l\u00f3gica (ej. Prolog)  </li> </ul> </li> <li> <p>Orientado a Eventos / Visual </p> </li> <li> <p>Flujo guiado por eventos externos (clics, se\u00f1ales, GUI)  </p> </li> <li> <p>Orientado a Aspectos (AOP) </p> </li> <li>Manejo de elementos transversales (logging, seguridad, etc.)</li> </ul> Notas sobre paradigmas visual, orientados a eventos y a aspectos <p>Se suele considerar la orientaci\u00f3n a eventos m\u00e1s bien un estilo de programaci\u00f3n que puede coexistir con POO o estructurada. Se pone aparte en muchas clasificaciones porque cambia la forma mental de dise\u00f1ar: pasas de pensar en \u201cqu\u00e9 pasos sigue mi programa\u201d a \u201cqu\u00e9 debe hacer mi programa cuando ocurra X\u201d.</p> <p>La programaci\u00f3n orientada a aspectos complementa a la POO. Mientras la POO organiza el software en objetos, la AOP organiza el software en objetos + aspectos transversales que se aplican de manera autom\u00e1tica all\u00ed donde se necesitan.</p>"},{"location":"01introduccion.html#lenguajes-multiparadigma","title":"Lenguajes multiparadigma","text":"<p>Hoy en d\u00eda, la mayor\u00eda de los lenguajes son multiparadigma. Ejemplo: Java, que es estructurado, orientado a objetos y funcional.</p>"},{"location":"01introduccion.html#14-fases-de-la-programacion","title":"1.4 Fases de la Programaci\u00f3n","text":"<p>El desarrollo de un programa no consiste solo en escribir c\u00f3digo. Se siguen distintas fases:</p> <ol> <li>Resoluci\u00f3n del problema</li> </ol> <ul> <li>An\u00e1lisis: identificar los requisitos del cliente.</li> <li>Dise\u00f1o: definir c\u00f3mo se resolver\u00e1 el problema.</li> </ul> <ol> <li>Implementaci\u00f3n</li> </ol> <ul> <li>Codificaci\u00f3n: escribir el c\u00f3digo en un lenguaje.</li> <li>Pruebas y validaci\u00f3n: comprobar que funciona correctamente.</li> </ul> <ol> <li>Explotaci\u00f3n y mantenimiento</li> </ol> <ul> <li>Uso en producci\u00f3n.</li> <li>Correcciones y mejoras.</li> </ul>"},{"location":"01introduccion.html#ejemplo-programa-paresimpares","title":"Ejemplo: programa \"pares/impares\"","text":"<p>An\u00e1lisis</p> <ul> <li>El programa debe pedir un n\u00famero entre 1 y 100.</li> <li>Si el n\u00famero es 0 \u2192 error.</li> <li>Si est\u00e1 fuera del rango \u2192 error.</li> <li>Indicar si es par o impar.</li> </ul> <p>Dise\u00f1o</p> <ul> <li>Puede representarse mediante diagrama de flujo o pseudoc\u00f3digo.</li> </ul> Ejemplo de diagrama de flujo Ejemplo de pseudoc\u00f3digo <p>Codificaci\u00f3n (Java)</p> <pre><code>import java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) {\n    int modulo, numero;\n    var scanner = new Scanner(System.in);\n    System.out.println(\"Introduce un n\u00famero\");\n    numero = Integer.parseInt(scanner.nextLine());\n\n    if (numero == 0) {\n      System.out.println(\"Valor incorrecto. El 0 no es v\u00e1lido\");\n    } else if (numero &lt; 0 || numero &gt; 100) {\n      System.out.println(\"N\u00famero no v\u00e1lido, el rango es 1-100\");\n    } else {\n      modulo = numero % 2;\n      if (modulo == 0) {\n        System.out.println(\"El n\u00famero es par\");\n      } else {\n        System.out.println(\"El n\u00famero es impar\");\n      }\n    }\n  }\n}\n</code></pre> <p>Pruebas y validaci\u00f3n</p> <ul> <li>Probar con n\u00fameros v\u00e1lidos e inv\u00e1lidos.</li> <li>Documentar c\u00f3mo usar el programa.</li> </ul> <p>Explotaci\u00f3n y mantenimiento</p> <ul> <li>Cuando el software se usa en la pr\u00e1ctica, se corrigen errores y se actualiza.</li> </ul>"},{"location":"01introduccion.html#15-lenguajes-de-programacion","title":"1.5 Lenguajes de Programaci\u00f3n","text":"<p>Los lenguajes han evolucionado mucho desde los inicios de la inform\u00e1tica.</p>"},{"location":"01introduccion.html#1-lenguaje-maquina","title":"1. Lenguaje m\u00e1quina","text":"<ul> <li>Es el nivel m\u00e1s bajo.</li> <li>Se escribe directamente en c\u00f3digo binario.</li> <li>Muy dif\u00edcil de aprender.</li> </ul>"},{"location":"01introduccion.html#2-lenguaje-ensamblador","title":"2. Lenguaje ensamblador","text":"<ul> <li>Usa instrucciones simb\u00f3licas (mnem\u00f3nicos).</li> <li>Depende de la arquitectura del PC.</li> <li>Requiere gran conocimiento del hardware.</li> </ul> <p>Ejemplo en v\u00eddeo</p> <ul> <li>Lenguaje ensamblador (YouTube 1)</li> <li>Lenguaje ensamblador (YouTube 2)</li> </ul>"},{"location":"01introduccion.html#3-lenguajes-compilados","title":"3. Lenguajes compilados","text":"<ul> <li>Traducidos a lenguaje m\u00e1quina por un compilador.</li> <li>R\u00e1pidos en ejecuci\u00f3n.</li> <li>Ejemplos: C, C++, Pascal, C#.</li> </ul>"},{"location":"01introduccion.html#4-lenguajes-interpretados","title":"4. Lenguajes interpretados","text":"<ul> <li>Cada instrucci\u00f3n se traduce y ejecuta en el momento.</li> <li>M\u00e1s lentos, pero flexibles.</li> <li>Ejemplos: Python, PHP, JavaScript.</li> </ul> <pre><code>numero1 = int(input(\"Ingresa un n\u00famero: \"))\nnumero2 = int(input(\"Ingresa otro n\u00famero: \"))\noperacion = input(\"suma, resta, divisi\u00f3n, multiplicaci\u00f3n: \")\n\nif operacion == \"suma\":\n    print(numero1 + numero2)\nelif operacion == \"resta\":\n    print(numero1 - numero2)\nelif operacion == \"divisi\u00f3n\":\n    print(numero1 / numero2)\nelif operacion == \"multiplicaci\u00f3n\":\n    print(numero1 * numero2)\n</code></pre>"},{"location":"01introduccion.html#caso-particular-java","title":"Caso particular: Java","text":"<ul> <li>Compilado a bytecode.</li> <li>Ejecutado por la M\u00e1quina Virtual de Java (JVM).</li> <li>Permite portabilidad entre sistemas.</li> </ul>"},{"location":"01introduccion.html#16-programas-en-java","title":"1.6 Programas en Java","text":"<p>Java es uno de los lenguajes m\u00e1s utilizados en el mundo. Sus caracter\u00edsticas:</p> <ul> <li>C\u00f3digo independiente de la arquitectura.</li> <li>Totalmente orientado a objetos.</li> <li>Sintaxis similar a C/C++.</li> <li>Gran biblioteca de clases.</li> <li>Preparado para aplicaciones en red.</li> <li>Seguro y robusto.</li> </ul>"},{"location":"01introduccion.html#proceso-de-trabajo","title":"Proceso de trabajo","text":"<ul> <li>Compilaci\u00f3n: con el JDK.</li> <li>Ejecuci\u00f3n: con el JRE.</li> </ul>"},{"location":"01introduccion.html#estructura-basica-de-un-programa","title":"Estructura b\u00e1sica de un programa","text":"<pre><code>public class HolaMundo {\n  public static void main(String[] args) {\n    System.out.println(\"Hola Mundo!\");\n  }\n}\n</code></pre> <p>Tipos de programas en Java:</p> <ul> <li>Consola</li> <li>Aplicaciones gr\u00e1ficas</li> <li>Applets</li> <li>Servlets</li> <li>Midlets</li> </ul>"},{"location":"01introduccion.html#17-entornos-de-desarrollo-integrado-ide","title":"1.7 Entornos de Desarrollo Integrado (IDE)","text":"<p>Un IDE integra editor, compilador, depurador y otras herramientas.</p> <p>Los m\u00e1s conocidos para Java son:</p> <ul> <li>IntelliJ IDEA: potente y muy usado en entornos profesionales.</li> <li>NetBeans: gratuito y vers\u00e1til.</li> </ul> <p>Consejo</p> <p>Empieza con un IDE sencillo, pero no olvides aprender tambi\u00e9n a compilar desde la terminal. Eso te ayudar\u00e1 a entender mejor c\u00f3mo funciona Java.</p>"},{"location":"01introduccion.html#18-actividades","title":"1.8 Actividades","text":"<ol> <li> <p>Enumera 5 ejemplos de tu vida diaria que dependen de la programaci\u00f3n.</p> </li> <li> <p>Explica con tus palabras la diferencia entre un algoritmo y un programa.</p> </li> <li> <p>Representa en pseudoc\u00f3digo un algoritmo que determine si un n\u00famero es divisible por 5.</p> </li> <li> <p>Busca 3 lenguajes de programaci\u00f3n compilados y 3 interpretados. Comenta en qu\u00e9 situaciones se usar\u00eda cada uno.</p> </li> <li> <p>Dibuja un diagrama de flujo que represente el c\u00e1lculo del \u00e1rea de un tri\u00e1ngulo.</p> </li> <li> <p>Descarga e instala un IDE de Java. Crea un programa \u201cHola Mundo\u201d y describe los pasos realizados.</p> </li> <li> <p>Investiga la diferencia entre OpenJDK y Oracle JDK y explica cu\u00e1l utilizar\u00edas en un proyecto educativo.</p> </li> <li> <p>Busca una oferta de trabajo en programaci\u00f3n y analiza: lenguaje solicitado, paradigma, herramientas y nivel de experiencia requerido.</p> </li> </ol>"},{"location":"02fundamentos.html","title":"Tema 2: Fundamentos b\u00e1sicos de la programaci\u00f3n","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 10 sesiones</p> <p>Resultados de aprendizaje</p> <ol> <li>Comprender los conceptos fundamentales del lenguaje Java relacionados con tipos de datos, variables y estructuras de control.</li> <li>Saber leer y escribir datos por consola y formatear la salida.</li> <li>Identificar y utilizar operadores y expresiones conociendo su precedencia y efectos.</li> <li>Aplicar conversiones de tipo (impl\u00edcitas y expl\u00edcitas) y prever p\u00e9rdida de informaci\u00f3n.</li> <li>Implementar estructuras selectivas y repetitivas para resolver problemas b\u00e1sicos.</li> <li>Documentar y depurar programas sencillos en Java.</li> </ol> <p>Criterios de evaluaci\u00f3n</p> <ol> <li>El alumno utiliza correctamente las funciones de entrada/salida (<code>Scanner</code>, <code>System.out</code>) y elige la m\u00e1s adecuada seg\u00fan la tarea.</li> <li>Se declaran variables con tipado adecuado, incluyendo constantes <code>final</code> cuando corresponde.</li> <li>Se aplican operadores correctamente y se demuestra conocimiento de su precedencia y efectos sobre tipos.</li> <li>Se implementan estructuras <code>if</code>, <code>switch</code>, <code>for</code>, <code>while</code> y <code>do-while</code> para solucionar problemas concretos.</li> <li>Se realizan pruebas que comprueban casos l\u00edmite, se documentan los supuestos y se corrige con pruebas simples.</li> <li>Los ejercicios propuestos incluyen comentarios explicativos y manejo b\u00e1sico de errores de entrada.</li> </ol>"},{"location":"02fundamentos.html#21-introduccion","title":"2.1 Introducci\u00f3n","text":"<p>En este tema vamos a trabajar las bases de la programaci\u00f3n imperativa con Java: c\u00f3mo representar informaci\u00f3n (tipos y variables), c\u00f3mo comunicarnos con el usuario (entrada y salida), y c\u00f3mo controlar el flujo del programa (condicionales y bucles). Estos conceptos son claves porque, una vez dominados, permiten construir cualquier algoritmo y entender mejor paradigmas superiores (POO, concurrencia, etc.).</p> <p>Lectura previa recomendada</p> <p>Repasa el Tema 1 (Introducci\u00f3n a la programaci\u00f3n) para recordar conceptos como algoritmo, pseudoc\u00f3digo y diagrama de flujo \u2014estos siguen siendo \u00fatiles cuando traduzcas la l\u00f3gica a Java.</p>"},{"location":"02fundamentos.html#22-salida-de-datos-por-pantalla","title":"2.2 Salida de datos por pantalla","text":""},{"location":"02fundamentos.html#funciones-basicas","title":"Funciones b\u00e1sicas","text":"<p>En Java, la salida por consola se realiza fundamentalmente con la clase <code>System.out</code>. Las funciones m\u00e1s habituales son:</p> <ul> <li><code>System.out.print(\"texto\");</code> \u2192 imprime sin salto de l\u00ednea.</li> <li><code>System.out.println(\"texto\");</code> \u2192 imprime y a\u00f1ade salto de l\u00ednea.</li> <li><code>System.out.printf(\"formato %args\", arg1, arg2);</code> \u2192 imprime con formato (similar a <code>printf</code> en C).</li> </ul> <p>Estas funciones pertenecen al stream est\u00e1ndar de salida (<code>stdout</code>) y son \u00fatiles para depuraci\u00f3n y programas de consola.</p> <pre><code>System.out.print(\"Hola\");\nSystem.out.println(\" Mundo\");\nSystem.out.printf(\"N\u00famero: %d, texto: %s\\n\", 10, \"ejemplo\");\n</code></pre> <p>Uso did\u00e1ctico</p> <p>Usa <code>println</code> cuando quieras mostrar l\u00edneas completas y <code>print</code> para construir la salida de forma progresiva. Emplea <code>printf</code> cuando necesites controlar el formato (ancho, decimales, justificaci\u00f3n).</p>"},{"location":"02fundamentos.html#colorear-texto-codigo-ansi","title":"Colorear texto (c\u00f3digo ANSI)","text":"<p>En terminales compatibles, se pueden imprimir c\u00f3digos de escape ANSI para cambiar color y estilo:</p> <pre><code>public class Colores {\n    public static void main(String[] args) {\n        System.out.print(\"\\033[33m mandarina\");\n        System.out.print(\"\\033[32m hierba\");\n        System.out.print(\"\\033[31m tomate\");\n        System.out.print(\"\\033[0m\\n\"); // reset\n    }\n}\n</code></pre> <p>Nota importante: No todas las consolas (especialmente emuladores de Windows antiguos) interpretan estos c\u00f3digos por defecto. En Windows moderno (PowerShell, Windows Terminal) suelen funcionar; en algunos casos necesitar\u00e1s librer\u00edas o configurar la consola.</p>"},{"location":"02fundamentos.html#caracteres-especiales-unicode","title":"Caracteres especiales (Unicode)","text":"<p>Puedes usar secuencias <code>\\uXXXX</code> para imprimir caracteres Unicode por su c\u00f3digo hexadecimal:</p> <pre><code>public class CaracteresEspeciales {\n    public static void main(String[] args) {\n        System.out.print(\"Corchea: \\u266A\");\n        System.out.print(\" Doble corchea: \\u266B\");\n    }\n}\n</code></pre> <p>Consulta tablas Unicode para encontrar s\u00edmbolos \u00fatiles (p. ej. <code>\\u266A</code> = \u266a).</p>"},{"location":"02fundamentos.html#formatear-la-salida","title":"Formatear la salida","text":"<p><code>printf</code> permite m\u00e1scaras como <code>%s</code>, <code>%d</code>, <code>%f</code> y especificadores de precisi\u00f3n y ancho:</p> <pre><code>public class SalidaFormateada {\n    public static void main(String[] args) {\n        System.out.printf(\"El n\u00famero %d no tiene decimales.\\n\", 21);\n        System.out.printf(\"El n\u00famero %.3f sale con 3 decimales.\\n\", 21.0);\n        System.out.printf(\"Soy %s y tengo %d a\u00f1os.\\n\", \"Eladio\", 39);\n    }\n}\n</code></pre> <p>Formato y localizaci\u00f3n</p> <p>Ten en cuenta que el separador decimal depende del locale en algunos m\u00e9todos. <code>printf</code> en Java usa <code>.</code> como separador decimal a menos que cambies el <code>Locale</code>. Para salidas localizadas usa <code>String.format(Locale, ...)</code> o controla el <code>Locale</code> de <code>Formatter</code>.</p> Salida de datos y ejemplos en consola"},{"location":"02fundamentos.html#23-variables-e-identificadores","title":"2.3 Variables e identificadores","text":""},{"location":"02fundamentos.html#identificadores","title":"Identificadores","text":"<p>Un identificador es el nombre que damos a variables, m\u00e9todos, clases o paquetes. Reglas y recomendaciones importantes:</p> <ul> <li>Java distingue entre may\u00fasculas y min\u00fasculas: <code>num</code> \u2260 <code>Num</code>.</li> <li>Convenci\u00f3n de nombres: <code>lowerCamelCase</code> para variables y m\u00e9todos, <code>UpperCamelCase</code> para clases.</li> <li>El primer car\u00e1cter debe ser una letra, <code>$</code> o <code>_</code> (aunque <code>$</code> y <code>_</code> no se recomiendan).</li> <li>Evita palabras reservadas (p. ej. <code>class</code>, <code>int</code>, <code>if</code>...).</li> </ul> <p>En equipos, seguir una gu\u00eda de estilo (por ejemplo la de Google para Java) mejora la legibilidad.</p> <p>Nombres descriptivos</p> <p>Prefiere nombres descriptivos: <code>int numeroAlumnos</code> es m\u00e1s claro que <code>int n</code>.</p> Identificadores: convenci\u00f3n lowerCamelCase"},{"location":"02fundamentos.html#variables","title":"Variables","text":"<p>Una variable es una zona de memoria con nombre y tipo. Su tipo determina qu\u00e9 valores puede almacenar y qu\u00e9 operaciones admite.</p> <pre><code>int numero;        // declaraci\u00f3n\nnumero = 5;        // asignaci\u00f3n\n\nint contador = 0;  // declaraci\u00f3n e inicializaci\u00f3n\n</code></pre> <p>Tipos y \u00e1mbitos:</p> <ul> <li>Locales: declaradas dentro de funciones, visibles solo all\u00ed.</li> <li>Miembro: declaradas en la clase, visibles para instancias o <code>static</code> para la clase (Se ven en temas posteriores).</li> <li>Par\u00e1metros: variables que se pasan a las funcinoes al llamarlas.</li> </ul>"},{"location":"02fundamentos.html#tipos-de-variables-clasificacion-conceptual","title":"Tipos de variables (clasificaci\u00f3n conceptual)","text":"<ul> <li>Primitivas vs Referenciadas: las primitivas contienen el valor (ej. <code>int</code>), las referenciadas contienen una referencia (direcci\u00f3n de memoria) a un objeto (<code>String</code>, <code>Persona</code>, arrays).</li> <li>Variables vs Constantes: constantes se declaran con <code>final</code>.</li> <li>Miembro vs Local: \u00e1mbito y ciclo de vida diferentes.</li> </ul>"},{"location":"02fundamentos.html#ejemplo-con-variables-estaticas-y-locales","title":"Ejemplo con variables est\u00e1ticas y locales","text":"<pre><code>public class TiposVariables {\n    // Constante\n    final double PI = 3.1415926536;\n    // Est\u00e1tica (campo de clase)\n    static int x;\n\n    static int obtenerX(int x){\n        // Local a la funci\u00f3n\n        int valorAntiguo = x;\n        return valorAntiguo;\n    }\n\n    public static void main(String[] args) {\n        x = 5;\n        System.out.println(obtenerX(x));\n    }\n}\n</code></pre>"},{"location":"02fundamentos.html#24-tipos-de-datos","title":"2.4 Tipos de datos","text":"<p>Los tipos describen qu\u00e9 valores puede contener una variable y qu\u00e9 operaciones son v\u00e1lidas.</p>"},{"location":"02fundamentos.html#primitivos-y-referenciados","title":"Primitivos y referenciados","text":"<ul> <li>Primitivos: <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>float</code>, <code>double</code>, <code>char</code>, <code>boolean</code>.</li> <li>Referenciados: clases, interfaces, arrays (ej. <code>String</code>, <code>Persona</code>, <code>int[]</code>).</li> </ul> Tipo Tama\u00f1o Valores t\u00edpicos / comentario <code>byte</code> 8 bits -128 a 127 <code>short</code> 16 -32.768 a 32.767 <code>int</code> 32 -2^31 ... 2^31-1 <code>long</code> 64 n\u00fameros grandes, a\u00f1ade <code>L</code> <code>float</code> 32 punto flotante simple, a\u00f1ade <code>f</code> <code>double</code> 64 punto flotante doble (por defecto) <code>char</code> 16 car\u00e1cter Unicode <code>boolean</code> 1 (conceptual) <code>true</code> o <code>false</code> Tipos de datos primitivos"},{"location":"02fundamentos.html#rangos-y-valores-por-defecto","title":"Rangos y valores por defecto","text":"<p>Los tipos primitivos tienen valores por defecto cuando son campos de clase (no locales):</p> <ul> <li><code>int</code> \u2192 <code>0</code>, <code>double</code> \u2192 <code>0.0</code>, <code>boolean</code> \u2192 <code>false</code>, <code>char</code> \u2192 <code>'\\u0000'</code> (car\u00e1cter nulo).</li> </ul> Rangos de los tipos primitivos"},{"location":"02fundamentos.html#declaracion-e-inicializacion-ejemplos","title":"Declaraci\u00f3n e inicializaci\u00f3n: ejemplos","text":"<pre><code>boolean abierto = true;\nbyte repeticiones = 22;\nchar letra = 'a';\nshort pantalones = 22;\nint asistentes = 22;\nlong poblacion = 2200000L;\nfloat nota = 9.5f;\ndouble precio = 22.55;\nString nombre = \"Eladio\";\n</code></pre>"},{"location":"02fundamentos.html#var-en-java","title":"<code>var</code> en Java","text":"<p>Desde Java 10 existe <code>var</code> para inferencia local de tipos:</p> <pre><code>var numeroAlumnos = 15;\nvar radio = 3.14;  // double inferred\n</code></pre> <p>Uso de <code>var</code></p> <p><code>var</code> mejora la concisi\u00f3n pero reduce la expl\u00edcitez del c\u00f3digo. Para variables con tipos claros y en ejemplos did\u00e1cticos, recomendamos declarar expl\u00edcitamente el tipo (especialmente en material de aprendizaje).</p>"},{"location":"02fundamentos.html#char-formas-de-asignacion","title":"<code>char</code>: formas de asignaci\u00f3n","text":"<p>Un <code>char</code> puede asignarse de tres maneras:</p> <ul> <li>Directamente: <code>char c = 'A';</code></li> <li>Por c\u00f3digo Unicode: <code>char c = '\\u0040';</code></li> <li>Por entero (valor ASCII/Unicode): <code>char c = 63;  // caracter '?'</code></li> </ul> <pre><code>char simbolo1 = '&amp;';\nchar simbolo2 = '\\u0040';\nchar simbolo3 = 63;\n</code></pre>"},{"location":"02fundamentos.html#boolean-expresiones-logicas","title":"<code>boolean</code>: expresiones l\u00f3gicas","text":"<p><code>boolean</code> almacena <code>true</code> o <code>false</code>. Se suele asignar a partir de comparaciones:</p> <pre><code>int edad = 12;\nboolean adulto = edad &gt;= 18;\n\nif (adulto) {\n    System.out.println(\"Eres mayor de edad\");\n} else {\n    System.out.println(\"Eres menor de edad\");\n}\n</code></pre>"},{"location":"02fundamentos.html#25-depuracion-y-herramientas","title":"2.5 Depuraci\u00f3n y herramientas","text":"<p>Depurar es una habilidad esencial. Aprender a usar el debugger del IDE (breakpoints, inspecci\u00f3n de variables, paso a paso) ayuda a entender el estado del programa y detectar errores l\u00f3gicos.</p> Usando el debugger <p>Estrategia de depuraci\u00f3n</p> <ul> <li>A\u00f1ade <code>System.out.printf</code> para inspecciones r\u00e1pidas.  </li> <li>Usa breakpoints para detener la ejecuci\u00f3n y examinar variables.  </li> <li>Escribe pruebas con datos l\u00edmite para descubrir comportamientos inesperados.</li> </ul>"},{"location":"02fundamentos.html#26-tipos-referenciados","title":"2.6 Tipos referenciados","text":"<p>Los tipos referenciados no almacenan el valor directamente, sino una referencia (puntero) a un objeto en memoria:</p> <ul> <li>Arrays: <code>int[] vector = new int[10];</code></li> <li>Clases: <code>Persona usuario = new Persona();</code></li> <li><code>String</code> (inmutable): comparte caracter\u00edsticas propias (pool de cadenas).</li> </ul> <pre><code>public class Main {\n    public static void main(String[] args) {\n        Usuario usuarioActivo;\n        int listaNotas[];\n    }\n}\n</code></pre> Pool de cadenas <p>Un \"pool de cadenas\" (o string pool) es un \u00e1rea de memoria donde se almacenan las cadenas de texto \u00fanicas para optimizar el uso de la memoria en lenguajes de programaci\u00f3n como Java y C#. Cuando se crea un literal de cadena, el sistema primero verifica si ya existe en el pool; si es as\u00ed, reutiliza la referencia existente en lugar de crear una nueva instancia, lo que hace que dos cadenas con el mismo valor apunten a la misma direcci\u00f3n de memoria. Este proceso mejora la eficiencia, especialmente cuando la misma cadena se utiliza en m\u00faltiples lugares. </p>"},{"location":"02fundamentos.html#27-lectura-de-datos-desde-teclado","title":"2.7 Lectura de datos desde teclado","text":""},{"location":"02fundamentos.html#clase-scanner","title":"Clase <code>Scanner</code>","text":"<p><code>Scanner</code> es la forma m\u00e1s com\u00fan de leer desde <code>System.in</code> en programas de consola:</p> <pre><code>import java.util.Scanner;\n\npublic class LeerTextoScanner {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        System.out.print(\"Dime tu nombre completo: \");\n        String nombre = s.nextLine(); // lee hasta ENTER\n    }\n}\n</code></pre>"},{"location":"02fundamentos.html#conversion-de-datos-leidos","title":"Conversi\u00f3n de datos le\u00eddos","text":"<p><code>Scanner</code> devuelve strings con <code>nextLine()</code> o tokens con <code>next()</code>. Para convertir a tipos num\u00e9ricos se usan funciones como <code>Integer.parseInt</code> o <code>Float.parseFloat</code>:</p> <pre><code>// Leer y convertir\nString respuesta;\nSystem.out.print(\"Dime tu edad: \");\nrespuesta = s.nextLine();\nint edad = Integer.parseInt(respuesta);\n\n// Leer float (usar punto decimal)\nSystem.out.print(\"Dime tu estatura en metros: \");\nrespuesta = s.nextLine();\nfloat estatura = Float.parseFloat(respuesta);\n\nSystem.out.printf(\"Edad: %d a\u00f1os. Estatura: %.2f metros.\", edad, estatura);\n</code></pre> <p>Decimal y configuraci\u00f3n regional</p> <p>En algunos sistemas, <code>nextFloat()</code> interpreta el separador decimal seg\u00fan el <code>Locale</code> (en Espa\u00f1a la coma). Para evitar confusiones, pide al usuario que use <code>.</code> como separador o establece expl\u00edcitamente el <code>Locale</code> de <code>Scanner</code>.</p>"},{"location":"02fundamentos.html#leer-varios-datos-con-metodos-especificos","title":"Leer varios datos con m\u00e9todos espec\u00edficos","text":"<p><code>Scanner</code> incluye m\u00e9todos <code>nextInt()</code>, <code>nextFloat()</code>, <code>next()</code> (token), <code>nextLine()</code> (l\u00ednea completa):</p> <pre><code>System.out.print(\"Dime tu nombre, edad y estatura separados por espacio: \");\nString nombre = s.next();\nint edad = s.nextInt();\nfloat estatura = s.nextFloat();\n</code></pre>"},{"location":"02fundamentos.html#combinar-nextline-con-nextint-ojo","title":"Combinar <code>nextLine()</code> con <code>nextInt()</code> \u2014 ojo!","text":"<p>Si usas <code>nextInt()</code> y despu\u00e9s <code>nextLine()</code>, la segunda puede leer el salto de l\u00ednea sobrante. Soluci\u00f3n t\u00edpica: consumir el salto con un <code>nextLine()</code> extra.</p> <pre><code>int edad = s.nextInt();\ns.nextLine(); // consume el salto pendiente\nString nombre = s.nextLine();\n</code></pre> <p>Patr\u00f3n seguro</p> <p>Para lecturas mixtas: lee siempre con <code>nextLine()</code> y parsea manualmente (<code>Integer.parseInt(...)</code>) para evitar efectos secundarios del buffer.</p>"},{"location":"02fundamentos.html#28-operadores-y-expresiones","title":"2.8 Operadores y expresiones","text":"<p>Los operadores manipulan valores primitivos y devuelven otro valor (generalmente primitivo). Entender la diferencia entre expresi\u00f3n (por ejemplo <code>i + 1</code>) y sentencia (<code>suma = i + 1;</code>) es clave.</p>"},{"location":"02fundamentos.html#aritmeticos","title":"Aritm\u00e9ticos","text":"<p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> \u2014 con reglas de tipo: si ambos operandos son enteros, <code>/</code> hace divisi\u00f3n entera; si uno es float/double, la divisi\u00f3n es en coma flotante.</p> <pre><code>short x = 4;\nint y = 5;\n\nSystem.out.println(\"El resultado de x / y (divisi\u00f3n entera) es: \" + (x / y));\nSystem.out.println(\"El resto de x / y es: \" + (x % y));\n</code></pre>"},{"location":"02fundamentos.html#asignacion-combinada","title":"Asignaci\u00f3n combinada","text":"<p><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> facilitan operaciones con asignaci\u00f3n:</p> <pre><code>int x = 5, y = 3;\nx += y; // x == 8\nx -= y; // x == 5 (si se vuelve a aplicar sobre el estado anterior)\n</code></pre>"},{"location":"02fundamentos.html#incrementodecremento","title":"Incremento/decremento","text":"<p>Preincremento <code>++x</code> incrementa y devuelve el nuevo valor; postincremento <code>x++</code> devuelve el valor antiguo y luego incrementa.</p> <pre><code>int x = 3;\nint y = ++x; // x==4, y==4\n\nx = 3;\ny = x++; // x==4, y==3\n</code></pre>"},{"location":"02fundamentos.html#relacionales","title":"Relacionales","text":"<p>Comparan valores y devuelven <code>boolean</code>: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p> <p>Importante: para <code>String</code> en Java no uses <code>==</code> para comparar contenido; usa <code>equals()</code> o <code>equalsIgnoreCase()</code>.</p> <pre><code>String nombre = \"Manolo\";\nString input = s.nextLine();\nboolean comp = nombre.equals(input);\n</code></pre>"},{"location":"02fundamentos.html#logicos","title":"L\u00f3gicos","text":"<p><code>&amp;&amp;</code> (AND), <code>||</code> (OR), <code>!</code> (NOT). Recuerda evaluaci\u00f3n cortocircuitada: en <code>A &amp;&amp; B</code>, si <code>A</code> es <code>false</code> no se eval\u00faa <code>B</code>.</p>"},{"location":"02fundamentos.html#operador-ternario","title":"Operador ternario","text":"<p>Sintaxis compacta: <code>variable = condici\u00f3n ? valorSiTrue : valorSiFalse;</code></p> <pre><code>String mensaje = (num % 2 == 0) ? \"par\" : \"impar\";\n</code></pre>"},{"location":"02fundamentos.html#trabajo-con-cadenas-string","title":"Trabajo con cadenas (String)","text":"<p>Algunos m\u00e9todos \u00fatiles:</p> <ul> <li><code>length()</code> \u2192 longitud</li> <li><code>concat(...)</code> \u2192 concatenar</li> <li><code>equals(...)</code>, <code>equalsIgnoreCase(...)</code> \u2192 comparaci\u00f3n</li> <li><code>substring(i, j)</code> \u2192 subcadena</li> <li><code>toUpperCase()</code>, <code>toLowerCase()</code> \u2192 cambios de caso</li> </ul> <pre><code>String cad1 = \"CICLO DAW\", cad2 = \"ciclo daw\";\nSystem.out.println(cad1.length());\nSystem.out.println(cad1.equalsIgnoreCase(cad2));\nSystem.out.println(cad1.substring(6));\n</code></pre> Orden de precedencia de operadores (resumen visual) <p>Precedencia y par\u00e9ntesis</p> <p>Si una expresi\u00f3n te resulta ambigua o depende del tipo de los operandos, usa par\u00e9ntesis para dejar claro el orden de evaluaci\u00f3n y evitar errores por coerci\u00f3n de tipos.</p>"},{"location":"02fundamentos.html#29-conversion-de-tipo-cast","title":"2.9 Conversi\u00f3n de tipo (cast)","text":"<p>La conversi\u00f3n entre tipos num\u00e9ricos puede ser impl\u00edcita (cuando el compilador lo permite sin p\u00e9rdida aparente) o expl\u00edcita (cuando el programador fuerza la conversi\u00f3n con cast).</p>"},{"location":"02fundamentos.html#conversion-implicita-promocion","title":"Conversi\u00f3n impl\u00edcita (promoci\u00f3n)","text":"<p>Asignar de tipo menor a mayor:</p> <pre><code>int numeroEntero = 10;\nlong numeroLong = numeroEntero; // impl\u00edcita\nfloat numeroFloat = numeroEntero; // 10.0f\n</code></pre>"},{"location":"02fundamentos.html#conversion-explicita-casting","title":"Conversi\u00f3n expl\u00edcita (casting)","text":"<p>De mayor a menor (posible p\u00e9rdida de datos):</p> <pre><code>long numeroLong = 20L;\nint numeroEntero = (int) numeroLong; // expl\u00edcita\n\nfloat numeroFloat = 5.9f;\nint entero = (int) numeroFloat; // entero == 5 (se trunca)\n</code></pre>"},{"location":"02fundamentos.html#ejemplo-clasico-media-de-enteros","title":"Ejemplo cl\u00e1sico: media de enteros","text":"<p>Si sumas enteros y divides por <code>3</code> obtendr\u00e1s divisi\u00f3n entera. Para obtener decimal, convierte al menos un operando a <code>float</code> o <code>double</code>:</p> <pre><code>int nota1 = 4, nota2 = 7, nota3 = 8;\nfloat media = (float)(nota1 + nota2 + nota3) / 3;\nSystem.out.printf(\"Media: %.2f\", media);\n</code></pre>"},{"location":"02fundamentos.html#tabla-de-conversion-resumen","title":"Tabla de conversi\u00f3n (resumen)","text":"<ul> <li>CI \u2192 conversi\u00f3n impl\u00edcita posible</li> <li>C \u2192 casting expl\u00edcito necesario</li> <li>N \u2192 no permitido</li> </ul> Tabla resumen de conversi\u00f3n entre tipos <p>Evita p\u00e9rdida silenciosa</p> <p>Antes de castear, cuestiona si la p\u00e9rdida de informaci\u00f3n es aceptable. A\u00f1ade comentarios que justifiquen el cast si es deliberado.</p>"},{"location":"02fundamentos.html#210-comentarios","title":"2.10 Comentarios","text":"<p>Los comentarios facilitan la comprensi\u00f3n del c\u00f3digo y la colaboraci\u00f3n. Tipos en Java:</p> <ul> <li><code>// comentario de una l\u00ednea</code></li> <li><code>/* comentario      de varias l\u00edneas */</code></li> <li><code>/** Comentario Javadoc */</code> \u2192 para documentaci\u00f3n de clases/m\u00e9todos (herramientas como <code>javadoc</code> lo usan)</li> </ul> <pre><code>// Comentario de una l\u00ednea\n/*\n  Comentario multil\u00ednea\n*/\n/**\n * Devuelve la suma de a y b.\n * @param a primer sumando\n * @param b segundo sumando\n * @return suma\n */\npublic int suma(int a, int b){ return a + b; }\n</code></pre> <p>Javadoc</p> <p>Documenta par\u00e1metros y valores de retorno en m\u00e9todos p\u00fablicos. Facilita la generaci\u00f3n autom\u00e1tica de documentaci\u00f3n.</p>"},{"location":"02fundamentos.html#211-estructuras-selectivas","title":"2.11 Estructuras selectivas","text":"<p>Las estructuras selectivas permiten ejecutar c\u00f3digo condicionalmente.</p>"},{"location":"02fundamentos.html#if-simple-y-if-else","title":"<code>if</code> simple y <code>if-else</code>","text":"<pre><code>if (expresionLogica) {\n    // sentencias si true\n} else {\n    // sentencias si false\n}\n</code></pre> <p>Ejemplo: determinar par/impar</p> <pre><code>public class ParImpar {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int num = Integer.parseInt(s.nextLine());\n\n        // Es par si el resto de dividirlo entre 2 es 0\n        int resto = num % 2;\n        if (resto == 0) {\n            System.out.printf(\"El n\u00famero %d es par.\", num);\n        } else {\n            System.out.printf(\"El n\u00famero %d es impar.\", num);\n        }\n    }\n}\n</code></pre> <p>Si el bloque contiene solo una sentencia, las llaves pueden omitirse, pero no es buena pr\u00e1ctica omitirlas en c\u00f3digo docente porque facilita errores al modificar el c\u00f3digo.</p>"},{"location":"02fundamentos.html#switch-clasico-y-switch-expression-java-12","title":"<code>switch</code> cl\u00e1sico y <code>switch</code> expression (Java 12+)","text":"<p>Switch cl\u00e1sico (compatible con <code>int</code>, <code>String</code>, etc.):</p> <pre><code>switch(variable) {\n    case valor1:\n        sentencias;\n        break;\n    case valor2:\n        sentencias;\n        break;\n    default:\n        sentencias;\n}\n</code></pre> <p>Switch expression (m\u00e1s moderno, Java 12/13+), uso de <code>-&gt;</code> o <code>yield</code>:</p> <pre><code>int numMes = 5;\nswitch(numMes) {\n    case 9, 10, 11, 12 -&gt; System.out.println(\"1er trimestre\");\n    case 1, 2, 3 -&gt; System.out.println(\"2\u00ba trimestre\");\n    case 4, 5, 6 -&gt; {\n        System.out.println(\"\u00daltimo trimestre! :)\");\n        System.out.println(\"3er trimestre\");\n    }\n    default -&gt; System.out.println(\"No hay clase\");\n}\n</code></pre> <p>Ejemplo asignando valores y usando <code>yield</code>:</p> <pre><code>String mes = \"may\";\nint trimestre = switch(mes) {\n    case \"sep\", \"oct\", \"nov\", \"dic\" -&gt; 1;\n    case \"ene\", \"feb\", \"mar\" -&gt; 2;\n    case \"abr\", \"may\", \"jun\" -&gt; {\n        System.out.println(\"\u00daltimo trimestre! :)\");\n        yield 3;\n    }\n    default -&gt; -1;\n};\nSystem.out.println(\"Trimestre n\u00famero \" + trimestre);\n</code></pre> <p>Ejercicio (switch cl\u00e1sico)</p> <p>Completa el <code>switch</code> que devuelve el nombre del mes a partir de su n\u00famero: <pre><code>var s = new Scanner(System.in);\nSystem.out.println(\"Introduce el n\u00famero del mes: \");\nint mes = Integer.parseInt(s.nextLine());\nString nombreDelMes = \"\";\nswitch(mes){\n    case 1:\n        nombreDelMes = \"enero\";\n        break;\n    case 2:\n        nombreDelMes = \"febrero\";\n        break;\n    // COMPLETA EL C\u00d3DIGO QUE FALTA AQU\u00cd\n}\nSystem.out.println(\"Mes \" + mes + \": \" + nombreDelMes);\n</code></pre></p>"},{"location":"02fundamentos.html#212-estructuras-repetitivas","title":"2.12 Estructuras repetitivas","text":"<p>Las estructuras repetitivas permiten ejecutar una o varias sentencias varias veces mientras se cumpla una condici\u00f3n.</p> Diagrama y ejemplos de bucles"},{"location":"02fundamentos.html#for-clasico","title":"<code>for</code> cl\u00e1sico","text":"<pre><code>for (inicio; condicion; iteracion){\n    sentencias;\n}\n</code></pre> <p>Ejemplo: tabla de multiplicar</p> <pre><code>System.out.println(\"Tabla de multiplicar del 5\");\nfor (int i = 0; i &lt;= 10; i++) {\n    System.out.println(5 + \" * \" + i + \" = \" + 5 * i);\n}\n</code></pre> <p>Contar hacia atr\u00e1s:</p> <pre><code>for (int i = 10; i &gt;= 0; i--) {\n    System.out.println(\"i = \" + i);\n}\n</code></pre>"},{"location":"02fundamentos.html#for-each","title":"<code>for-each</code>","text":"<p>Para recorrer arrays y colecciones de manera segura y sin \u00edndices:</p> <pre><code>String semana[] = {\"lunes\", \"martes\", \"mi\u00e9rcoles\", \"jueves\", \"viernes\", \"s\u00e1bado\", \"domingo\"};\nfor (String dia : semana) {\n    System.out.println(\"d\u00eda = \" + dia);\n}\n</code></pre>"},{"location":"02fundamentos.html#while","title":"<code>while</code>","text":"<pre><code>int i = 0;\nwhile (i &lt;= 10) {\n    System.out.println(5 + \" * \" + i + \" = \" + 5 * i);\n    i++; // iteraci\u00f3n\n}\n</code></pre> <p>Ejemplo pr\u00e1ctico (login con intentos):</p> <pre><code>boolean bloqueado = false;\nboolean logueado = false;\nString usuario = \"admin\", pass = \"superPass1234\";\nint intentos = 3;\n\nScanner s = new Scanner(System.in);\n\nwhile (!bloqueado &amp;&amp; !logueado &amp;&amp; intentos &gt; 0) {\n    System.out.print(\"Bienvenido, introduzca su usuario: \");\n    String entradaUsuario = s.nextLine();\n    System.out.print(\"Introduzca su contrase\u00f1a: \");\n    String entradaPass = s.nextLine();\n\n    if (entradaUsuario.equals(usuario) &amp;&amp; entradaPass.equals(pass)) {\n        logueado = true;\n        System.out.println(\"Acceso correcto\");\n    } else {\n        intentos--;\n        System.out.println(\"Error. Intentos restantes: \" + intentos);\n    }\n\n    if (intentos == 0) {\n        bloqueado = true;\n    }\n}\n</code></pre>"},{"location":"02fundamentos.html#do-while","title":"<code>do-while</code>","text":"<p>Se ejecuta al menos una vez:</p> <pre><code>int i = 1;\ndo {\n    System.out.println(\"Valor: \" + i);\n    i++;\n} while (i &lt;= 5);\n</code></pre> <p>Elegir bucle</p> <ul> <li>Usa <code>for</code> cuando conoces el n\u00famero de iteraciones.  </li> <li>Usa <code>while</code> cuando la condici\u00f3n se eval\u00faa antes y puede no ejecutarse ninguna vez.  </li> <li>Usa <code>do-while</code> cuando la condici\u00f3n se eval\u00faa despu\u00e9s y necesitas asegurar una ejecuci\u00f3n inicial.</li> </ul>"},{"location":"02fundamentos.html#213-recomendaciones","title":"2.13 Recomendaciones","text":"<ul> <li>Documenta funciones p\u00fablicas con Javadoc.  </li> <li>Nombres significativos para variables, m\u00e9todos y clases.  </li> <li>Comprueba entradas: valida datos del usuario antes de parsear.  </li> <li>Pruebas simples: prueba con casos l\u00edmite y nulos.  </li> <li>Formato y estilo: sigue una gu\u00eda de estilo y mant\u00e9n indentaci\u00f3n consistente.</li> </ul>"},{"location":"02fundamentos.html#214-referencias","title":"2.14 Referencias","text":"<ul> <li>Gu\u00eda de estilo Java (Google Java Style Guide).  </li> <li>Documentaci\u00f3n oficial Oracle/OpenJDK.  </li> <li>Tutoriales y recursos sobre <code>Scanner</code>, <code>String</code>, <code>Math</code>, y debugging en IntelliJ IDEA.</li> </ul>"},{"location":"02fundamentos.html#215-actividades","title":"2.15 Actividades","text":"<p>A continuaci\u00f3n encontrar\u00e1s ejercicios con distintos niveles y sugerencias de mejora o ampliaci\u00f3n.</p> <ol> <li> <p>Positivo/negativo     Escribe un programa que lea un n\u00famero y diga si es positivo, negativo o cero.  </p> <ul> <li>Ampliaci\u00f3n: valida la entrada y maneja n\u00fameros grandes (<code>long</code>).  </li> <li>Casos de prueba: -1, 0, 1, <code>Long.MAX_VALUE</code>.</li> </ul> </li> <li> <p>Operaciones b\u00e1sicas     Crea un programa que lea dos n\u00fameros y muestre su suma, resta, multiplicaci\u00f3n y divisi\u00f3n.  </p> <ul> <li>Ampliaci\u00f3n: gestiona divisi\u00f3n por cero con control de excepciones.</li> </ul> </li> <li> <p>Par/Impar     Realiza un programa que pida un n\u00famero e indique si es par o impar.  </p> <ul> <li>Soluci\u00f3n (colapsada abajo).</li> </ul> </li> <li> <p>Bucle <code>for</code> hasta 10     Haz un programa que muestre los n\u00fameros del 1 al 10 usando un <code>for</code>.  </p> <ul> <li>Ampliaci\u00f3n: muestra tambi\u00e9n la tabla de multiplicar de cada n\u00famero.</li> </ul> </li> <li> <p>Suma de primeros 100 naturales     Programa que calcule y muestre la suma de los 100 primeros n\u00fameros naturales.  </p> <ul> <li>Ampliaci\u00f3n: implementa una soluci\u00f3n matem\u00e1tica (<code>n*(n+1)/2</code>) y otra por bucle; compara tiempos.</li> </ul> </li> <li> <p>Validaci\u00f3n completa     Dise\u00f1a un programa que pida la edad y valide que es un n\u00famero entre 0 y 120. Si la entrada no es v\u00e1lida, vuelve a pedirla hasta que lo sea (usa <code>while</code> y manejo de excepciones).</p> </li> <li> <p>Men\u00fa de \u00e1reas (switch)     Implementa el ejemplo del c\u00e1lculo de \u00e1reas (cuadrado, rect\u00e1ngulo, tri\u00e1ngulo) con <code>switch</code>. Mejora el men\u00fa para permitir repetir operaciones hasta que el usuario decida salir.</p> </li> <li> <p>Login con l\u00edmites de intentos     Implementa el ejemplo de login con <code>while</code> y a\u00f1ade un temporizador simulado tras 3 intentos fallidos (por ejemplo, <code>Thread.sleep(2000)</code> para pausar).</p> </li> <li> <p>Conversi\u00f3n y media     Programa que lea tres notas enteras, calcule la media y muestre con 2 decimales. Prueba con entradas que muestren p\u00e9rdida por conversi\u00f3n y explica c\u00f3mo evitarla.</p> </li> </ol>"},{"location":"03aleatorios_funciones.html","title":"Tema 3: Aleatorios y funciones","text":"Duraci\u00f3n y criterios de evaluaci\u00f3n <p>Duraci\u00f3n estimada: 12 sesiones</p> <p>Resultados de aprendizaje:</p> <ol> <li>Comprende la generaci\u00f3n y uso de n\u00fameros aleatorios en Java.</li> <li>Define y utiliza funciones para estructurar el c\u00f3digo.</li> <li>Emplea paso de par\u00e1metros y retorno de valores.</li> <li>Aplica modularidad en la resoluci\u00f3n de problemas.</li> <li>Utiliza correctamente el \u00e1mbito de las variables y su ciclo de vida.</li> </ol> <p>Criterios de evaluaci\u00f3n:</p> <ol> <li>Se ha utilizado la clase <code>Random</code> y el m\u00e9todo <code>Math.random()</code> de forma adecuada.</li> <li>Se han dise\u00f1ado funciones con par\u00e1metros y valor de retorno.</li> <li>Se ha empleado correctamente el \u00e1mbito de las variables.</li> <li>Se han organizado los programas en funciones reutilizables.</li> <li>Se han documentado y probado las funciones implementadas.</li> </ol>"},{"location":"03aleatorios_funciones.html#31-numeros-aleatorios","title":"3.1 N\u00fameros aleatorios","text":"<p>En muchos programas es necesario generar valores aleatorios, como en juegos, simulaciones o pruebas. En Java existen varias formas de hacerlo, siendo las m\u00e1s comunes la clase <code>Random</code> y el m\u00e9todo est\u00e1tico <code>Math.random()</code>.</p> Ejemplo de aplicaci\u00f3n que usa n\u00fameros aleatorios."},{"location":"03aleatorios_funciones.html#uso-de-la-clase-random","title":"Uso de la clase <code>Random</code>","text":"<pre><code>import java.util.Random;\n\npublic class Aleatorios {\n    public static void main(String[] args) {\n        Random r = new Random();\n        int numero = r.nextInt(10); // genera n\u00famero entre 0 y 9\n        System.out.println(\"N\u00famero generado: \" + numero);\n    }\n}\n</code></pre> <p>M\u00e9todos principales de Random</p> <ul> <li><code>nextInt(n)</code> \u2192 devuelve un n\u00famero entero entre 0 y n-1 </li> <li><code>nextDouble()</code> \u2192 devuelve un n\u00famero decimal entre 0.0 y 1.0  </li> <li><code>nextBoolean()</code> \u2192 genera un valor verdadero o falso</li> </ul>"},{"location":"03aleatorios_funciones.html#uso-de-mathrandom","title":"Uso de <code>Math.random()</code>","text":"<pre><code>double aleatorio = Math.random(); // valor entre 0.0 y 1.0\nint numero = (int) (Math.random() * 10); // valor entre 0 y 9\n</code></pre> <p>Ejemplo pr\u00e1ctico</p> <pre><code>public class EjemploRandom {\n    public static void main(String[] args) {\n        for (int i = 0; i &lt; 5; i++) {\n            int dado = (int) (Math.random() * 6) + 1;\n            System.out.println(\"Tirada: \" + dado);\n        }\n    }\n}\n</code></pre>"},{"location":"03aleatorios_funciones.html#32-funciones","title":"3.2 Funciones","text":"<p>Una funci\u00f3n (tambi\u00e9n llamada m\u00e9todo cuando se usa POO) es un bloque de c\u00f3digo que realiza una tarea espec\u00edfica. Permiten dividir un programa en partes m\u00e1s peque\u00f1as y reutilizables.</p>"},{"location":"03aleatorios_funciones.html#estructura-general","title":"Estructura general","text":"<pre><code>modificador tipoRetorno nombreFuncion(par\u00e1metros) {\n    // cuerpo del m\u00e9todo\n    return valor;\n}\n</code></pre> <p>Ejemplo b\u00e1sico:</p> <pre><code>public static int sumar(int a, int b) {\n    return a + b;\n}\n</code></pre> <p>Ventajas del uso de funciones</p> <ul> <li>Favorecen la reutilizaci\u00f3n del c\u00f3digo.</li> <li>Mejoran la legibilidad y mantenimiento.</li> <li>Permiten aislar errores y depurar m\u00e1s f\u00e1cilmente.</li> </ul> Estructura general de un m\u00e9todo en Java."},{"location":"03aleatorios_funciones.html#33-tipos-de-funciones","title":"3.3 Tipos de funciones","text":"<p>Podemos clasificar las funciones seg\u00fan reciban o no par\u00e1metros y devuelvan o no un valor.</p> Tipo Par\u00e1metros Retorno Ejemplo Sin par\u00e1metros ni retorno No No <code>void saludar()</code> Con par\u00e1metros S\u00ed No <code>void mostrar(String msg)</code> Con retorno No S\u00ed <code>int obtenerNumero()</code> Con par\u00e1metros y retorno S\u00ed S\u00ed <code>int sumar(int a, int b)</code>"},{"location":"03aleatorios_funciones.html#ejemplo-completo","title":"Ejemplo completo","text":"<pre><code>public class EjemploFunciones {\n    public static void main(String[] args) {\n        saludar();\n        mostrar(\"\u00a1Bienvenido a Java!\");\n        int resultado = sumar(5, 3);\n        System.out.println(\"Resultado: \" + resultado);\n    }\n\n    static void saludar() {\n        System.out.println(\"Hola!\");\n    }\n\n    static void mostrar(String mensaje) {\n        System.out.println(mensaje);\n    }\n\n    static int sumar(int a, int b) {\n        return a + b;\n    }\n}\n</code></pre>"},{"location":"03aleatorios_funciones.html#34-parametros-y-argumentos","title":"3.4 Par\u00e1metros y argumentos","text":"<p>Cuando una funci\u00f3n necesita datos externos, en la definici\u00f3n de la funci\u00f3n los indicamos mediante par\u00e1metros y en la llamada mediante argumentos.</p> <p>En Java el paso de par\u00e1metros se realiza por valor, lo que significa que la funci\u00f3n recibe una copia de los datos.</p> Paso de par\u00e1metros a funciones en Java. <pre><code>public class PasoPorValor {\n    // En la declaraci\u00f3n de la funci\u00f3n --&gt; par\u00e1metro x\n    static void duplicar(int x) {\n        x = x * 2;\n        System.out.println(\"Dentro de la funci\u00f3n: \" + x);\n    }\n\n    public static void main(String[] args) {\n        int num = 5;\n        // En la llamada a la funci\u00f3n --&gt; argumento num\n        duplicar(num);\n        System.out.println(\"Fuera de la funci\u00f3n: \" + num);\n    }\n}\n</code></pre> <p>Resultado</p> <p>Dentro de la funci\u00f3n: 10 Fuera de la funci\u00f3n: 5</p>"},{"location":"03aleatorios_funciones.html#35-ambito-de-las-variables","title":"3.5 \u00c1mbito de las variables","text":"<p>Las variables tienen un \u00e1mbito (scope) que determina desde d\u00f3nde pueden usarse. Una variable declarada dentro de una funci\u00f3n es local; fuera de ella, global (aunque en Java, las variables de clase son atributos).</p> <pre><code>public class Ambito {\n    static int global = 10;\n\n    public static void main(String[] args) {\n        int local = 5;\n        System.out.println(\"Variable local: \" + local);\n        System.out.println(\"Variable global: \" + global);\n    }\n}\n</code></pre> <p>Recuerda</p> <p>Las variables locales se crean al entrar en la funci\u00f3n y se destruyen al salir.</p>"},{"location":"03aleatorios_funciones.html#36-recursividad","title":"3.6 Recursividad","text":"<p>Una funci\u00f3n puede llamarse a s\u00ed misma, lo que se denomina recursividad. Debe tener una condici\u00f3n de parada para evitar llamadas infinitas.</p>"},{"location":"03aleatorios_funciones.html#ejemplo-de-factorial-recursivo","title":"Ejemplo de factorial recursivo","text":"<pre><code>public class Factorial {\n    static int factorial(int n) {\n        if (n == 0) return 1; // Condici\u00f3n de parada\n        else return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Factorial de 5 = \" + factorial(5));\n    }\n}\n</code></pre> <p>Precauci\u00f3n</p> <p>Las llamadas recursivas consumen memoria, por lo que deben usarse con cuidado.</p>"},{"location":"03aleatorios_funciones.html#37-funciones-con-numeros-aleatorios","title":"3.7 Funciones con n\u00fameros aleatorios","text":"<p>Podemos combinar la generaci\u00f3n de n\u00fameros aleatorios con funciones para crear programas m\u00e1s estructurados.</p> <pre><code>import java.util.Random;\n\npublic class Lanzamiento {\n    static int tirarDado() {\n        Random r = new Random();\n        return r.nextInt(6) + 1;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 0; i &lt; 3; i++) {\n            System.out.println(\"Tirada \" + (i+1) + \": \" + tirarDado());\n        }\n    }\n}\n</code></pre> Ejemplo de funci\u00f3n con valores aleatorios."},{"location":"03aleatorios_funciones.html#38-ejercicios-propuestos","title":"3.8 Ejercicios propuestos","text":"<ol> <li>Crea una funci\u00f3n que reciba dos n\u00fameros enteros y devuelva el mayor.  </li> <li>Dise\u00f1a un m\u00e9todo que calcule el cuadrado de un n\u00famero.  </li> <li>Escribe una funci\u00f3n que simule el lanzamiento de un dado de 6 caras.  </li> <li>Implementa una funci\u00f3n que reciba un n\u00famero y devuelva su factorial.  </li> <li>Realiza un programa que genere 10 n\u00fameros aleatorios y calcule su media.  </li> <li>Haz un programa que use una funci\u00f3n para comprobar si un n\u00famero es primo.</li> </ol> Soluci\u00f3n ejercicio 303 <pre><code>import java.util.Random;\npublic class Dado {\n    static int lanzar() {\n        Random r = new Random();\n        return r.nextInt(6) + 1;\n    }\n    public static void main(String[] args) {\n        System.out.println(\"Resultado: \" + lanzar());\n    }\n}\n</code></pre> Soluci\u00f3n ejercicio 304 <pre><code>public class Factorial {\n    static int factorial(int n) {\n        if (n == 0) return 1;\n        else return n * factorial(n - 1);\n    }\n    public static void main(String[] args) {\n        System.out.println(\"Factorial de 5: \" + factorial(5));\n    }\n}\n</code></pre> Soluci\u00f3n ejercicio 306 <pre><code>public class Primo {\n    static boolean esPrimo(int n) {\n        if (n &lt;= 1) return false;\n        for (int i = 2; i &lt;= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i &lt;= 10; i++) {\n            System.out.println(i + \" es primo? \" + esPrimo(i));\n        }\n    }\n}\n</code></pre>"},{"location":"planning.html","title":"Planificaci\u00f3n","text":""},{"location":"planning.html#1-introduccion-24h","title":"1.- Introducci\u00f3n (24h)","text":"<ul> <li> 1.- (1) Introducci\u00f3n asignatura. Arquitecturas, decisiones de dise\u00f1o - Ejercicios 101-103</li> <li> 2.- (2) Herramientas. Puesta en marcha - Ejercicios 104-106</li> </ul> <p>Total = 256h de sesiones lectivas.</p>"}]}